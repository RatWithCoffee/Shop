package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"fmt"
	custom_models2 "graphql/internal/custom_models"
	custom_models "graphql/internal/graph/models"
	"graphql/internal/session"

	"gorm.io/gorm"
)

// Model is the resolver for the model field.
func (r *cartItemResolver) Model(ctx context.Context, obj *custom_models2.CartItem) (*custom_models2.Item, error) {
	var item custom_models2.Item
	err := r.Db.Model(&custom_models2.Item{}).Where("id = ?", obj.ItemID).Find(&item).Error
	return &item, err
}

// Childs is the resolver for the childs field.
func (r *catalogResolver) Childs(ctx context.Context, obj *custom_models2.Catalog) ([]*custom_models2.Catalog, error) {
	var childs []*custom_models2.Catalog
	err := r.Db.Model(&custom_models2.Catalog{}).Where("parent_id = ?", obj.ID).Find(&childs).Error
	return childs, err
}

// Items is the resolver for the items field.
func (r *catalogResolver) Items(ctx context.Context, obj *custom_models2.Catalog, limit *int, offset *int) ([]*custom_models2.Item, error) {
	var items []*custom_models2.Item
	err := r.Db.Where("parent_id = ?", obj.ID).
		Limit(*limit).
		Offset(*offset).Order("id").
		Find(&items).Error
	return items, err
}

// Parent is the resolver for the parent field.
func (r *itemResolver) Parent(ctx context.Context, obj *custom_models2.Item) (*custom_models2.Catalog, error) {
	var parent custom_models2.Catalog
	err := r.Db.Model(&custom_models2.Catalog{}).Where("id = ?", obj.ParentID).First(&parent).Error
	return &parent, err
}

// Seller is the resolver for the seller field.
func (r *itemResolver) Seller(ctx context.Context, obj *custom_models2.Item) (*custom_models2.Seller, error) {
	var seller custom_models2.Seller
	err := r.Db.Where("id = ?", obj.SellerID).
		Find(&seller).Error
	return &seller, err
}

// InCart is the resolver for the inCart field.
func (r *itemResolver) InCart(ctx context.Context, obj *custom_models2.Item) (int, error) {
	var cartItem custom_models2.CartItem
	userSession, _ := session.SessionFromCtx(ctx)
	err := r.Db.Where("item_id = ? AND user_id = ?", obj.ID, userSession.Id).Find(&cartItem).Error
	if err != nil {
		return 0, err
	}
	return cartItem.Quantity, nil
}

// AddToCart is the resolver for the AddToCart field.
func (r *mutationResolver) AddToCart(ctx context.Context, in custom_models.CartInput) ([]*custom_models2.CartItem, error) {
	if in.Quantity <= 0 {
		return nil, fmt.Errorf("invalid quantiy")
	}

	var item custom_models2.Item
	err := r.Db.Where("id = ?", in.ItemID).Find(&item).Error
	if err != nil {
		return nil, fmt.Errorf("no such item")
	}
	newItemQuantity := item.InStockValue - in.Quantity
	if newItemQuantity < 0 {
		return nil, fmt.Errorf("not enough quantity")
	}

	err = r.Db.Model(&custom_models2.Item{}).Where("id = ?", item.ID).Update("in_stock_value", newItemQuantity).Error
	if err != nil {
		return nil, err
	}

	userSession, _ := session.SessionFromCtx(ctx)
	var cartItem custom_models2.CartItem
	err = r.Db.Where("item_id = ? AND user_id = ?", item.ID, userSession.Id).Take(&cartItem).Error
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			newCartItem := custom_models2.CartItem{UserID: userSession.Id, ItemID: item.ID, Quantity: in.Quantity}
			err = r.Db.Create(&newCartItem).Error
		} else {
			return nil, err
		}
	} else {
		err = r.Db.Model(&custom_models2.CartItem{}).Where("item_id = ? AND user_id = ?", item.ID, userSession.Id).
			Update("quantity", cartItem.Quantity+in.Quantity).Error
		if err != nil {
			return nil, err
		}
	}

	var cart []*custom_models2.CartItem
	err = r.Db.Find(&cart).Error
	if err != nil {
		return nil, err
	}
	return cart, err
}

// RemoveFromCart is the resolver for the RemoveFromCart field.
func (r *mutationResolver) RemoveFromCart(ctx context.Context, in custom_models.CartInput) ([]*custom_models2.CartItem, error) {
	if in.Quantity <= 0 {
		return nil, fmt.Errorf("invalid quantiy")
	}
	if in.Quantity == 4 {
		fmt.Println("dsdff")
	}

	var item custom_models2.Item
	err := r.Db.Where("id = ?", in.ItemID).Find(&item).Error
	if err != nil {
		return nil, fmt.Errorf("no such item")
	}

	userSession, _ := session.SessionFromCtx(ctx)
	var cartItem custom_models2.CartItem
	err = r.Db.Where("item_id = ? AND user_id = ?", item.ID, userSession.Id).Take(&cartItem).Error
	if err != nil {
		return nil, err
	}
	newCartItemQuantity := cartItem.Quantity - in.Quantity
	if newCartItemQuantity < 0 {
		return nil, fmt.Errorf("invalid quantiy")
	} else if newCartItemQuantity == 0 {
		err = r.Db.Model(&custom_models2.CartItem{}).Where("item_id = ? AND user_id = ?", item.ID, userSession.Id).
			Delete(&cartItem).Error
	} else {
		err = r.Db.Model(&custom_models2.CartItem{}).Where("item_id = ? AND user_id = ?", item.ID, userSession.Id).
			Update("quantity", newCartItemQuantity).Error
	}
	if err != nil {
		return nil, err
	}

	newItemQuantity := item.InStockValue + in.Quantity
	err = r.Db.Model(&custom_models2.Item{}).Where("id = ?", item.ID).Update("in_stock_value", newItemQuantity).Error
	if err != nil {
		return nil, err
	}

	var cart []*custom_models2.CartItem
	err = r.Db.Find(&cart).Error
	if err != nil {
		return nil, err
	}
	return cart, err
}

// Catalog is the resolver for the Catalog field.
func (r *queryResolver) Catalog(ctx context.Context, id uint) (*custom_models2.Catalog, error) {
	var catalog *custom_models2.Catalog
	res := r.Db.First(&catalog, id)
	return catalog, res.Error
}

// Shop is the resolver for the Shop field.
func (r *queryResolver) Shop(ctx context.Context, parentID uint) ([]*custom_models2.Catalog, error) {
	var catalogs []*custom_models2.Catalog
	err := r.Db.Where("parent_id = ?", parentID).Find(&catalogs).Error
	return catalogs, err
}

// Seller is the resolver for the Seller field.
func (r *queryResolver) Seller(ctx context.Context, id uint) (*custom_models2.Seller, error) {
	var seller *custom_models2.Seller
	res := r.Db.First(&seller, id)
	return seller, res.Error
}

// MyCart is the resolver for the MyCart field.
func (r *queryResolver) MyCart(ctx context.Context) ([]*custom_models2.CartItem, error) {
	var cartItems []*custom_models2.CartItem
	userSession, _ := session.SessionFromCtx(ctx)
	err := r.Db.Where("user_id = ?", userSession.Id).Find(&cartItems).Error
	if err != nil {
		return nil, err
	}
	return cartItems, nil
}

// Deals is the resolver for the deals field.
func (r *sellerResolver) Deals(ctx context.Context, obj *custom_models2.Seller) (int, error) {
	panic(fmt.Errorf("not implemented: Deals - deals"))
}

// Items is the resolver for the items field.
func (r *sellerResolver) Items(ctx context.Context, obj *custom_models2.Seller, limit *int, offset *int) ([]*custom_models2.Item, error) {
	var items []*custom_models2.Item
	err := r.Db.Where("seller_id = ?", obj.ID).
		Limit(*limit).
		Offset(*offset).
		Find(&items).Error

	return items, err
}

// CartItem returns CartItemResolver implementation.
func (r *Resolver) CartItem() CartItemResolver { return &cartItemResolver{r} }

// Catalog returns CatalogResolver implementation.
func (r *Resolver) Catalog() CatalogResolver { return &catalogResolver{r} }

// Item returns ItemResolver implementation.
func (r *Resolver) Item() ItemResolver { return &itemResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Seller returns SellerResolver implementation.
func (r *Resolver) Seller() SellerResolver { return &sellerResolver{r} }

type cartItemResolver struct{ *Resolver }
type catalogResolver struct{ *Resolver }
type itemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type sellerResolver struct{ *Resolver }
